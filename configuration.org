* Emacs Init

** Instructions
Add the following line to ~init.el~:
~(org-babel-load-file "~/.emacs.d/configuration.org")~

** Include common lisp goodies such as loop. 

#+BEGIN_SRC emacs-lisp
(require 'cl)

#+END_SRC

** Include languages to org babel 
*** Enable Several languages
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
 (python . t)
 (js . t)
 (shell . t)
 (C . t)
 (latex . t)
 (ledger . t)
))
  

#+END_SRC

*** Remove message when running code evaluation
#+BEGIN_SRC 
(setq org-confirm-babel-evaluate nil)

#+END_SRC

#+RESULTS:

** Change Styling in Terminal

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC


** Package Management

*** Straight
See https://github.com/raxod502/straight.el#comparison-to-el-get .

**** Log 
I hope that this will work for most of my projects, I plan on using
el-get if not (2020-05-15).

*** Includ code
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

#+RESULTS:
: t

** UI

*** Alarm Bell

Using a visual Bell instead of audio bell. [[https://www.emacswiki.org/emacs/AlarmBell][Source]]


#+BEGIN_SRC emacs-lisp

;; (setq visible-bell 1) ;; displays an alert
 (setq ring-bell-function 'ignore)


#+END_SRC

#+RESULTS:
: ignore

*** Desktop 

**** Keep the workspace when closing and openning emacs. Force load without asking.
     :PROPERTIES:
     :CREATED:  July  1, 2015
     :SOURCE:   http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
     :END:
  
#+BEGIN_SRC emacs-lisp

;; Originally Created: July  1, 2015
;; 
;; Description: Keep the workspace when closing and openning emacs.
;;              Force load without asking
;; Improvements: 
;; Modified:

(desktop-save-mode 1)

#+END_SRC

***** Can store other things in the desktop file ([[https://www.emacswiki.org/emacs?action=browse;oldid=DeskTop;id=Desktop][Example]])
     :PROPERTIES:
     :CREATED:  May 16,2020
     :SOURCE:   https://www.emacswiki.org/emacs?action=browse;oldid=DeskTop;id=Desktop
     :END:
 
#+BEGIN_SRC emacs-lisp

(setq history-length 250)
(add-to-list 'desktop-globals-to-save 'file-name-history)

#+END_SRC

#+RESULTS:
| desktop-missing-file-warning | tags-file-name | tags-table-list | search-ring | regexp-search-ring | register-alist | file-name-history |


*** Autoload Changes

#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Name:  Auto Refresh files when change
;; Created: Sunday, December 6, 2015
;; Source: Joshua Shelton (http://stackoverflow.com/questions/1480572/how-to-have-emacs-auto-refresh-all-buffers-when-files-have-changed-on-disk)
;; Description:
;; Improvements:
;; Modified:

(global-auto-revert-mode t) 

#+END_SRC

*** New Scratch Function

#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Name: New Temporary Buffer
;; Created: Monday, December 7, 2015
;; Source: Joshua Shelton
;;         http://stackoverflow.com/questions/10363982/how-can-i-open-a-temporary-buffer
;; Description:
;; Improvements:
;; Modified:



(defun new-scratch ()
  "open up a guaranteed new scratch buffer"
  (interactive)
  (switch-to-buffer (loop for num from 0
                          for name = (format "temp-buffer-%03i" num)
                          while (get-buffer name)
                          finally return name)))



#+END_SRC


*** Transparency

#+BEGIN_SRC emacs-lisp

 ;; Set transparency of emacs
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))


#+END_SRC


*** Evil mode

#+BEGIN_SRC emacs-lisp
(straight-use-package 'evil)
#+END_SRC

#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Name: Joshua
;; Created: 2020-04-25
;; Source: https://github.com/emacs-evil/evil
;; Description: Add Evil mode by default
;; Improvements: 
;; Modified:

;; Enable Evil
(require 'evil)
(evil-mode 1)


#+END_SRC

#+RESULTS:
: t

**** Load Theme

***** Possible Themes
      ~'ir-black~, ~'tango~

 #+BEGIN_SRC emacs-lisp
 (load-theme 'tango-dark t)

 #+END_SRC



**** Set Global Transparency

#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 80))
(add-to-list 'default-frame-alist '(alpha 85 80))


#+END_SRC

*** Stylizing
    
** Packages

*** Magit (git)
:PROPERTIES:
:SOURCE: 
:CREATED: 2020-05
:END:
#
#+BEGIN_SRC emacs-lisp
(straight-use-package 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

#+RESULTS:
: magit-status

*** Projectile
:PROPERTIES:
:SOURCE: https://github.com/bbatsov/projectile   
:CREATED: 2020-05-17
:END:
#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map) ;; Overrides Print, which I don't do from emacs
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

#+RESULTS:
: projectile-command-map
